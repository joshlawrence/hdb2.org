<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on hdb2.org</title>
        <link>https://hdb2.org/posts/</link>
        <description>Recent content in Posts on hdb2.org</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 26 Mar 2019 20:31:02 -0500</lastBuildDate>
        <atom:link href="https://hdb2.org/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Bash Aliases and Functions</title>
            <link>https://hdb2.org/posts/2019/03/bash-aliases-and-functions/</link>
            <pubDate>Tue, 26 Mar 2019 20:31:02 -0500</pubDate>
            
            <guid>https://hdb2.org/posts/2019/03/bash-aliases-and-functions/</guid>
            <description>Using aliases and functions can make working on the command line more efficient and fun. There are no shortage of examples on the Internet; here are a few I&amp;rsquo;ve found to be useful.
For more on the difference between an alias and a function, check out this thread on Stackexchange here.
Writing with nano alias nano=&amp;quot;nano -m -u -W --tabsize=4 --fill=80 --autoindent --smooth&amp;quot;  While vim and emacs are great text editors, it&amp;rsquo;s not always easy to configure them for simple writing.</description>
            <content type="html"><![CDATA[

<p>Using aliases and functions can make working on the command line more efficient and fun. There are no shortage of examples on the Internet; here are a few I&rsquo;ve found to be useful.</p>

<p><em>For more on the difference between an alias and a function, check out this thread on Stackexchange <a href="https://unix.stackexchange.com/questions/30925/in-bash-when-to-alias-when-to-script-and-when-to-write-a-function" target="_blank">here</a>.</em></p>

<hr />

<h2 id="writing-with-nano">Writing with nano</h2>

<pre><code>alias nano=&quot;nano -m -u -W --tabsize=4 --fill=80 --autoindent --smooth&quot;
</code></pre>

<p>While vim and emacs are great text <em>editors</em>, it&rsquo;s not always easy to configure them for simple writing.  This alias starts the nano editor with sane defaults (observing the 80 column rule, of course).</p>

<h2 id="merging-pdf-files">Merging PDF files</h2>

<pre><code># macOS specific
alias mergepdf=&quot;/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py&quot;
</code></pre>

<p>Did you know that macOS comes with python script for joining PDF files?  It does, and this alias makes it easy to use it.  Using it is pretty easy:</p>

<pre><code>mergepdf -o outputfile.pdf inputfile1.pdf inputfile2.pdf ...
</code></pre>

<p>It can also shuffle the input files; take a look at the <code>join.py</code> source for more information.</p>

<h2 id="pretty-man-pages">Pretty man pages</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pman <span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
  man -t $1 | open -fa /Applications/Preview.app
<span style="color:#f92672">}</span></code></pre></div>
<p>This one isn&rsquo;t necessarily all that useful, but it&rsquo;s <em>very</em> cool&hellip;make man pages pretty!</p>

<h2 id="create-and-enter-a-directory">Create and enter a directory</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mkcd<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
  mkdir -p $1; cd $1
<span style="color:#f92672">}</span></code></pre></div>
<p>From pretty to pragmatic, this one is my personal favorite due to it&rsquo;s simplicity and usefulness: Create a directory then cd into it.</p>

<h2 id="use">Use</h2>

<p>On my macOS machine, my aliases and functions are defined in <code>~/.bash_profile</code> (look for <code>~/.bashrc</code> on a Linux machine).  I only have a few functions so I just keep those in the profile file, but I split out the aliases in a separate file (<code>.bash_aliases</code>).  In your <code>.bash_profile</code> you can source the aliases file like so:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -f ~/.bash_aliases <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
  source ~/.bash_aliases
<span style="color:#66d9ef">fi</span></code></pre></div>
<p>Enjoy!</p>
]]></content>
        </item>
        
        <item>
            <title>Hello World</title>
            <link>https://hdb2.org/posts/2019/03/hello-world/</link>
            <pubDate>Mon, 25 Mar 2019 21:26:09 -0500</pubDate>
            
            <guid>https://hdb2.org/posts/2019/03/hello-world/</guid>
            <description>Hello, world!</description>
            <content type="html"><![CDATA[<p>Hello, world!</p>
]]></content>
        </item>
        
    </channel>
</rss>
